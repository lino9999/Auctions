# Nombre del workflow que aparecer치 en la pesta침a "Actions" de GitHub
name: Build and Release Plugin

# Configura cu치ndo se debe ejecutar este workflow
on:
  # Se ejecuta cada vez que haces un "push" a la rama "main"
  push:
    branches: [ "main" ] # Puedes cambiar "main" a "master" si usas esa rama
  # Tambi칠n permite ejecutarlo manualmente desde la pesta침a Actions
  workflow_dispatch:

# Define los trabajos (jobs) que se ejecutar치n
jobs:
  build-and-release:
    # Se ejecutar치 en un servidor virtual con la 칰ltima versi칩n de Ubuntu
    runs-on: ubuntu-latest

    # Otorga permisos al workflow para escribir en el repositorio (crear releases)
    permissions:
      contents: write

    # Pasos que seguir치 el trabajo
    steps:
      # 1. Clona tu repositorio en el servidor virtual
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Configura el entorno de Java (JDK)
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21' # Versi칩n requerida por tu pom.xml
          distribution: 'temurin'

      # 3. Cach칠 de dependencias de Maven para acelerar futuras compilaciones
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # 4. Compila el proyecto con Maven
      - name: Build with Maven
        run: mvn -B package --file pom.xml

      # 5. Extrae la versi칩n del plugin desde el pom.xml
      # A diferencia de tu ejemplo con Gradle, aqu칤 usamos Maven para obtener la versi칩n
      - name: Extract plugin version
        id: get_version
        run: echo "PLUGIN_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

      # 6. Crea la Release en GitHub
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          # El token es generado autom치ticamente por GitHub
          token: ${{ secrets.GITHUB_TOKEN }}
          # El archivo JAR que se adjuntar치 a la release
          # Usa la versi칩n extra칤da para encontrar el archivo correcto
          artifacts: "target/Auctions-${{ env.PLUGIN_VERSION }}.jar"
          # El nombre del tag de Git que se crear치 (ej. v1.0)
          tag: v${{ env.PLUGIN_VERSION }}
          # El t칤tulo de la Release
          name: Release v${{ env.PLUGIN_VERSION }}
          # El cuerpo/descripci칩n de la Release (puedes personalizarlo)
          body: |
            ## 游꿀 New Release!
            Automatic release generated upon merging to the main branch.
            
            **Commit:** `${{ github.sha }}`
          # Permite que el workflow actualice una release si el tag ya existe
          allowUpdates: true